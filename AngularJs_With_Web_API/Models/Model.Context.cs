//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AngularJs_With_Web_API.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class dbEntities : DbContext
    {
        public dbEntities()
            : base("name=dbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Employee> Employees { get; set; }
        public DbSet<Table> Tables { get; set; }
        public DbSet<User> Users { get; set; }
    
        public virtual ObjectResult<sp_InsUpdDelEmployee_Result> sp_InsUpdDelEmployee(Nullable<int> id, string name, string address, string country, string city, string mobile, string type)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("mobile", mobile) :
                new ObjectParameter("mobile", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_InsUpdDelEmployee_Result>("sp_InsUpdDelEmployee", idParameter, nameParameter, addressParameter, countryParameter, cityParameter, mobileParameter, typeParameter);
        }
    
        public virtual int AddUsers(string pLogin, string pPassword, string pUserName, string pUserEmail, Nullable<bool> isActive, Nullable<bool> isAdmin)
        {
            var pLoginParameter = pLogin != null ?
                new ObjectParameter("pLogin", pLogin) :
                new ObjectParameter("pLogin", typeof(string));
    
            var pPasswordParameter = pPassword != null ?
                new ObjectParameter("pPassword", pPassword) :
                new ObjectParameter("pPassword", typeof(string));
    
            var pUserNameParameter = pUserName != null ?
                new ObjectParameter("pUserName", pUserName) :
                new ObjectParameter("pUserName", typeof(string));
    
            var pUserEmailParameter = pUserEmail != null ?
                new ObjectParameter("pUserEmail", pUserEmail) :
                new ObjectParameter("pUserEmail", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isAdminParameter = isAdmin.HasValue ?
                new ObjectParameter("IsAdmin", isAdmin) :
                new ObjectParameter("IsAdmin", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUsers", pLoginParameter, pPasswordParameter, pUserNameParameter, pUserEmailParameter, isActiveParameter, isAdminParameter);
        }
    
        public virtual ObjectResult<GetAllUsers_Result> GetAllUsers(Nullable<int> id, string type)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllUsers_Result>("GetAllUsers", idParameter, typeParameter);
        }
    
        public virtual ObjectResult<updateusers_Result> updateusers(Nullable<int> userid, string pLogin, string pUserName, string pUserEmail, Nullable<bool> isActive, Nullable<bool> isAdmin)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var pLoginParameter = pLogin != null ?
                new ObjectParameter("pLogin", pLogin) :
                new ObjectParameter("pLogin", typeof(string));
    
            var pUserNameParameter = pUserName != null ?
                new ObjectParameter("pUserName", pUserName) :
                new ObjectParameter("pUserName", typeof(string));
    
            var pUserEmailParameter = pUserEmail != null ?
                new ObjectParameter("pUserEmail", pUserEmail) :
                new ObjectParameter("pUserEmail", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isAdminParameter = isAdmin.HasValue ?
                new ObjectParameter("IsAdmin", isAdmin) :
                new ObjectParameter("IsAdmin", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<updateusers_Result>("updateusers", useridParameter, pLoginParameter, pUserNameParameter, pUserEmailParameter, isActiveParameter, isAdminParameter);
        }
    }
}
